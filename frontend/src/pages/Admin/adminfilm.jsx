import React, { useState, useEffect } from 'react';
import './adminfilm.css';
import 'bootstrap/dist/css/bootstrap.min.css';

import MovieForm from '../../Components/Admin/MovieFrom.jsx';
import PosterPreview from '../../Components/Admin/PosterPreview.jsx';
import SessionsSchedule from '../../Components/Admin/SessionsSchedule.jsx';
import TrailerPlayer from '../../Components/Admin/TrailerPlayer.jsx';
import { useHalls } from './useHalls.js';
import { useMeta } from './useMeta.js';

export default function AddMovie() {
  const token = localStorage.getItem('access');

        
  const {
    actorOptions,
    genreOptions,
    directorOptions,
      fetchEntities,
  } = useMeta();

  
  // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
  const [parserYear, setParserYear] = useState('2025');
  const [parserTitle, setParserTitle] = useState('');
  const [selectedDirectors, setSelectedDirectors] = useState([]);
  const [selectedGenres, setSelectedGenres] = useState([]);
  const [selectedActors, setSelectedActors] = useState([]);
  const [createdMovie, setCreatedMovie] = useState(null);

  const [title, setTitle] = useState('');
  const [slogan, setSlogan] = useState('');
  const [age_rate, setAge] = useState('');
  const [country, setCountry] = useState('');
  const [original_title, setOriginalTitle] = useState('');
  const [language, setLanguage] = useState('');
  const [duration_minutes, setDuration] = useState('');
  const [description, setDescription] = useState('');
  const [trailer_url, setTrailer] = useState('');
  const [img_url, setImg] = useState('');
  const [poster_url, setPoster] = useState('');
  const [year, setYear] = useState('');

  const [alertMessage, setAlertMessage] = useState(null);
  const [alertType, setAlertType] = useState('');



  const handleParserSubmit = async (e) => {
  e.preventDefault();

  if (!parserYear || !parserTitle.trim()) {
    alert('–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —Ç–∞ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É');
    return;
  }

  try {
    console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', {
    title: parserTitle.trim(),
    year: parserYear,
  });
    const res = await fetch('/api/v1/admin/get_movie/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify({
        title: parserTitle.trim(),
        year: parserYear,
      }),
    });

    const data = await res.json();

    if (res.ok) {
      await fetchEntities();
      setTitle(data.title || '');
      setSlogan(data.slogan || '');
      setOriginalTitle(data.original_title || '');
      setDescription(data.description || '');
      setCountry(data.country || '');
      setYear(data.year?.toString() || '');
      setAge(data.age_rate?.toString() || '');
      setLanguage(data.language || '');
      setDuration(data.duration_minutes?.toString() || '');
      setImg(data.img_url || '');
      setPoster(data.poster_url || '');
      setTrailer(data.trailer_url || '');

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞, –∞–∫—Ç–µ—Ä–æ–≤, –∂–∞–Ω—Ä—ã, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
      const findOption = (name, options) =>
        options.find((opt) => opt.label.toLowerCase() === name.toLowerCase());

      const director = findOption(data.director_name, directorOptions);
      if (director) setSelectedDirectors([director]);

      const actors = data.actors
        .map((actorName) => findOption(actorName, actorOptions))
        .filter(Boolean);
      setSelectedActors(actors);

      const genres = data.genres
        .map((genreName) => findOption(genreName, genreOptions))
        .filter(Boolean);
      setSelectedGenres(genres);

      setAlertMessage('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —É —Ñ–æ—Ä–º—É!');
      setAlertType('success');
    } else {
      setAlertMessage(data?.detail || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ');
      setAlertType('danger');
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', err);
    setAlertMessage('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    setAlertType('danger');
  }
};




  const handleMovieSubmit = async (e) => {
    e.preventDefault();

    const movieData = {
      title,
      original_title,
      slogan,
      description,
      country,
      year,
      age_rate,
      language,
      duration_minutes,
      img_url,
      poster_url: '',
      trailer_url,
      is_active: true,
      active_until: null,
      directors: selectedDirectors.map((d) => d.value),
      genres: selectedGenres.map((g) => g.value),
      actors: selectedActors.map((g) => g.value),
    };

    try {
      const response = await fetch('/api/v1/admin/movies/', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(movieData),
      });

      const data = await response.json();

      if (response.ok) {
        setAlertMessage('–§—ñ–ª—å–º –¥–æ–¥–∞–Ω–æ!');
        setAlertType('success');
        setCreatedMovie(data);
      } else {
        setAlertMessage(data?.detail || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.');
        setAlertType('danger');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ:', error);
      setAlertMessage('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      setAlertType('danger');
    }
  };

  // –°–µ–∞–Ω—Å—ã
  const [sessionDate, setSessionDate] = useState('');
  const [sessions, setSessions] = useState([
    { startTime: '', expireTime: '', hall: '', price: '', vip_price: '' },
    { startTime: '', expireTime: '', hall: '', price: '', vip_price: '' },
    { startTime: '', expireTime: '', hall: '', price: '', vip_price: '' },
  ]);

  const handleSessionChange = (index, field, value) => {
    const updatedSessions = [...sessions];
    updatedSessions[index][field] = value;
    setSessions(updatedSessions);
  };

  const handleScheduleSubmit = async e => {
    e.preventDefault();
    if (!createdMovie) {
      alert('–§—ñ–ª—å–º –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
      return;
    }
  
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const valid = sessions
      .filter(s => s.startTime && s.expireTime && s.hall && s.price)
      .map(s => {
        const start_time = `${sessionDate}T${s.startTime}`;
        const expire_time = `${sessionDate}T${s.expireTime}`;

        return {
          start_time,
          expire_time,
          price: s.price,
          vip_price: s.vip_price || '-',
          movie: createdMovie.id,
          hall: Number(s.hall),
          };});
  
    try {
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∞–Ω—Å–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π POST
      const results = await Promise.all(
        valid.map(session =>
          fetch('/api/v1/admin/sessions/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify(session),
          })
        )
      );
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
      if (results.every(r => r.ok)) {
        alert('–£—Å—ñ —Å–µ–∞–Ω—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
      } else {
        const errors = await Promise.all(results.map(r => r.json()));
        console.error('–ü–û–ú–Ü–õ–ö–ò:', errors);
        alert('–î–µ—è–∫—ñ —Å–µ–∞–Ω—Å–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–Ω—Å–æ–ª—å.');
      }
    } catch (err) {
      console.error(err);
      alert('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.');
    }
  };

  const { hallOptions, loading, error } = useHalls(token);

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ª—ñ–≤‚Ä¶</div>;
  if (error)   return <div>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è</div>;

  return (
  <>
    {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
    <div className="admin-panel">
      <PosterPreview img_url={img_url}/>
      <div className="center-panel">
        <form onSubmit={handleParserSubmit} className="parser-form">
          <select
              value={parserYear}
              onChange={(e) => setParserYear(e.target.value)}
              className="parser-select"
          >
            {Array.from({length: 26}, (_, i) => {
              const y = 2025 - i;
              return <option key={y} value={y}>{y}</option>;
            })}
          </select>

          <input
              type="text"
              value={parserTitle}
              onChange={(e) => setParserTitle(e.target.value)}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É"
              className="parser-input"
          />

          <button type="submit" className="parser-button">–ü–∞—Ä—Å–∏—Ç–∏</button>
        </form>

        <MovieForm
            title={title}
            setTitle={setTitle}
            slogan={slogan}
            setSlogan={setSlogan}
            year={year}
            setYear={setYear}
            age_rate={age_rate}
            setAge={setAge}
            country={country}
            setCountry={setCountry}
            original_title={original_title}
            setOriginalTitle={setOriginalTitle}
            language={language}
            setLanguage={setLanguage}
            duration_minutes={duration_minutes}
            setDuration={setDuration}
            description={description}
            setDescription={setDescription}
            img_url={img_url}
            setImg={setImg}
            poster_url={poster_url}
            setPoster={setPoster}
            trailer_url={trailer_url}
            setTrailer={setTrailer}
            selectedDirectors={selectedDirectors}
            setSelectedDirectors={setSelectedDirectors}
            directorOptions={directorOptions}
            selectedActors={selectedActors}
            setSelectedActors={setSelectedActors}
            actorOptions={actorOptions}
            selectedGenres={selectedGenres}
            setSelectedGenres={setSelectedGenres}
            genreOptions={genreOptions}
            alertMessage={alertMessage}
            alertType={alertType}
            handleMovieSubmit={handleMovieSubmit}
        />
      </div>

      <SessionsSchedule
          createdMovie={createdMovie}
          movieTitle={createdMovie?.title}
          sessionDate={sessionDate}
          setSessionDate={setSessionDate}
          sessions={sessions}
          setSessions={setSessions}
          hallOptions={hallOptions}
          handleScheduleSubmit={handleScheduleSubmit}
          token={token}
      />
    </div>

    <TrailerPlayer trailer_url={trailer_url}/>
  </>
  );

}